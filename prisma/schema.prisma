// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  email       String   @unique
  username    String   @unique
  displayName String?
  bio         String?
  location    String?
  job         String?
  website     String?
  img         String?
  cover       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clerkId     String?  @unique

  // RELATIONS
  posts Post[]
  comments Comment[]
  likes Like[]
  saves SavedPosts[]
  
  followers  Follow[] @relation("UserFollowers")
  followings Follow[] @relation("UserFollowings")
  
  sentFollowRequests     FollowRequest[] @relation("FollowRequestSender")
  receivedFollowRequests FollowRequest[] @relation("FollowRequestReceiver")
  
  blocks    Block[] @relation("BlockSender")
  blockedBy Block[] @relation("BlockReceiver")
  
  stories   Story[]
  notifications Notification[]
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  desc        String?  @db.VarChar(255)
  img         String?
  imgHeight   Int?
  video       String?
  isSensitive Boolean  @default(false)

  // RELATIONS
  user   User   @relation(fields: [userId], references: [id])
  userId String

  rePostId Int?
  rePost   Post?  @relation("RePosts", fields: [rePostId], references: [id])
  rePosts  Post[] @relation("RePosts")

  parentPostId Int?
  parentPost   Post?  @relation("PostComments", fields: [parentPostId], references: [id])
  comments     Post[] @relation("PostComments")

  likes Like[]
  saves SavedPosts[]
  directComments Comment[]
}

model Comment {
  id   String @id @default(cuid())
  desc String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  userId String
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model SavedPosts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  userId String
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  followerId  String
  followingId String

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowings", fields: [followingId], references: [id])
  
  @@unique([followerId, followingId])
}

model FollowRequest {
  id String @id @default(cuid())
  createdAt DateTime @default(now())

  sender   User   @relation("FollowRequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String

  receiver   User   @relation("FollowRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@unique([senderId, receiverId])
}

model Block {
  id String @id @default(cuid())
  createdAt DateTime @default(now())

  blocker   User   @relation("BlockSender", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String

  blocked   User   @relation("BlockReceiver", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId])
}

model Story {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  img String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Notification {
  id String @id @default(cuid())
  type String // "like", "comment", "follow", "followRequest"
  message String
  read Boolean @default(false)
  createdAt DateTime @default(now())
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}